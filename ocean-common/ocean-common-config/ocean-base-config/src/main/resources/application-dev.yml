server:
  max-http-header-size: 10000000
  undertow:
     max-http-post-size: 0
     buffer-size: 1024
     direct-buffers: true
  tomcat:
    basedir: /tmp/tomcat
spring:
  main:
    allow-bean-definition-overriding: true
  shardingsphere:
    # 展示修改以后的sql语句
    props:
      sql-show: true
    datasource:
      names: master0,master0slave0
      master0:
        url: jdbc:mysql://192.168.204.164:3306/ocean_v2?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=GMT%2b8
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        username: root
        password: 123456
        initialSize: 5
        minIdle: 5
        maxActive: 20
        maxWait: 60000
        timeBetweenEvictionRunsMillis: 60000
        minEvictableIdleTimeMillis: 300000
        validationQuery: SELECT 1 FROM DUAL
        testWhileIdle: true
        testOnBorrow: false
        testOnReturn: false
        poolPreparedStatements: true
        #配置监控统计拦截的filters，stat:监控统计，去掉后监控界面sql无法统计，'wall'用于防火墙，防止SQL注入，log4j：日志记录
        filters: stat,wall,log4j
        maxPoolPreparedStatementPerConnectionSize: 20
        useGlobalDataSourceStat: true
        connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500
      master0slave0:
        url: jdbc:mysql://192.168.204.152:3306/ocean_v2?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=GMT%2b8
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        username: root
        password: 123456
        initialSize: 5
        minIdle: 5
        maxActive: 20
        maxWait: 60000
        timeBetweenEvictionRunsMillis: 60000
        minEvictableIdleTimeMillis: 300000
        validationQuery: SELECT 1 FROM DUAL
        testWhileIdle: true
        testOnBorrow: false
        testOnReturn: false
        poolPreparedStatements: true
        #配置监控统计拦截的filters，stat:监控统计，去掉后监控界面sql无法统计，'wall'用于防火墙，防止SQL注入，log4j：日志记录
        filters: stat,wall,log4j
        maxPoolPreparedStatementPerConnectionSize: 20
        useGlobalDataSourceStat: true
        connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500
    sharding:
      # 读写分离配置
      master-slave-rules:
        ms0:
          master-data-source-name: master0
          slave-data-source-names: master0slave0
      binding-tables: sys_user
      tables:
        sys_user: #逻辑表名,在一个库里分表:ds0.t_user_0,ds0.t_user_1
          key-generator:
            column: user_id
            type: SNOWFLAKE
            workerId: 123
          actual-data-nodes: ms0.sys_user$->{0..1}
          table-strategy: #表分片策略
            inline: #行表达式分片策略
              sharding-column: user_id #分片的字段
              algorithm-expression: sys_user$->{user_id % 2} #分片的算法
      #defaultDataSourceName: master0
    enabled: true
  redis:
    host: 192.168.204.151
    port: 6379
    password:
  jackson:
    date-format: yyyy-MM-dd HH:mm
    time-zone: GMT+8
  cloud:
    nacos:
      discovery:
        server-addr: 127.0.0.1:8848
  servlet:
    multipart:
      max-file-size: 500MB
      max-request-size: 500MB
mybatis:
  config-location: classpath:myBatis-config.xml
  mapper-locations: classpath:mapper/*.xml


#注册中心
eureka:
  instance:
    prefer-ip-address: true
    instance-id: ${spring.application.name}:${spring.cloud.client.ip-address}:${server.port}
    #status-page-url: http://${spring.cloud.client.ip-address}:${server.port}/swagger-ui.html
  client:
    service-url:
      defaultZone: http://root:root@localhost:8761/eureka/
ribbon:
  eureka:
    enabled: true
  ConnectTimeout: 60000
  ReadTimeout: 60000

tx-lcn:
  client:
    manager-address: 127.0.0.1:8070

feign:
  hystrix:
    enabled: false
  httpclient:
        enabled: true
        connection-timeout: 60000
  compression:
    request:
      enabled: true
      mime-type: text/html,application/xml,application/json
      min-request-size: 2048
    response:
      enabled: true

##关闭hystrix 超时
hystrix.command.default.execution.timeout.enabled: false
hystrix.command.default.isolation.thread.timeoutInMilliseconds: 70000

zuul:
  host:
    connect-timeout-millis: 60000
    socket-timeout-millis: 60000

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: ALWAYS
#提高日志级别为WARN
logging:
  level:
    com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver: WARN
